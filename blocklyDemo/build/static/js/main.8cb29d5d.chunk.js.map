{"version":3,"sources":["loadScript.js","App.js","reportWebVitals.js","index.js"],"names":["loadScript","Blockly","Python","WorkSpace","Script","funcParts","funcRe","args","argsRe","argsArray","exec","arg","parts","split","length","console","log","push","Blocks","init","this","setNextStatement","setPreviousStatement","setOutput","setColour","setTooltip","appendDummyInput","appendField","FieldNumber","block","argument0","getFieldValue","bind","loadScript2","jsonInit","valueToCode","ORDER_FUNCTION_CALL","ORDER_MEMBER","FieldTextInput","FieldDropdown","addReservedWords","App","props","state","code","handleChange","handleSubmit","handleResize","primaryEvent","Events","Ui","setState","workspaceToCode","workSpace","e","element","blocklyArea","x","y","offsetLeft","offsetTop","offsetParent","blocklyDiv","style","left","top","width","offsetWidth","height","offsetHeight","svgResize","document","getElementById","inject","toolbox","addChangeListener","window","addEventListener","lines","map","line","className","id","position","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8cb29d5d.chunk.js","sourcesContent":["\r\nconst text=`\r\nimport math,time\r\n\r\ndef str_cos(int_x,str_y):\r\n    return str(math.cos(int_x))+str_y\r\n    \r\ndef none_sleep(int_sec):\r\n    time.sleep\r\n\r\nprint(sin(1,\"aiueo\"))\r\n`\r\nfunction loadScript2(Blockly, Python, WorkSpace, Script) {\r\n    let funcRe = /^def\\s+([\\w\\s,()]+)/gm, funcParts;\r\n    while ((funcParts = funcRe.exec(Script)) !== null) {\r\n        let args=[], argsRe=/\\w+/g, argsArray\r\n        while ((argsArray = argsRe.exec(funcParts[1])) !== null) {\r\n            let arg=argsArray[0]\r\n            let parts=arg.split(\"_\")\r\n            if(parts.length<2){\r\n                console.log(\"無効な識別子\",arg,\"in\",funcParts[0])\r\n                return\r\n            }\r\n            args.push(parts)\r\n        }\r\n        Blockly.Blocks[args[0][1]] = {\r\n            args: args,\r\n            init: function () {\r\n                console.log(this.args);\r\n                this.setNextStatement(true);\r\n                this.setPreviousStatement(true);\r\n                this.setOutput(false);\r\n                this.setColour(100);\r\n                this.setTooltip('import module, eg. import request.');\r\n                this.appendDummyInput()\r\n                    .appendField(this.args[0][1])\r\n                    .appendField(new Blockly.FieldNumber(''), 'FIELDNAME');\r\n            }\r\n        }\r\n        Python[args[0][1]] = function (block) {\r\n            let argument0 = block.getFieldValue('FIELDNAME')\r\n            return args[0][1]+\"(\" + argument0 + \")\\n\"\r\n        }.bind(args);\r\n        console.log(WorkSpace)\r\n        //console.log(new Blockly.ToolboxItem({kind:Blockly.utils.toolbox.FLYOUT_TOOLBOX_KIND,type:args[0][1]}, WorkSpace.getToolbox(), null))\r\n    }\r\n}\r\nexport default function loadScript(Blockly, Python, WorkSpace){\r\n    loadScript2(Blockly, Python, WorkSpace, text)\r\n    Blockly.Blocks['string_length'] = {\r\n        init: function () {\r\n            this.jsonInit({\r\n                \"message0\": '%1 の長さ',\r\n                \"args0\": [\r\n                    {\r\n                        \"type\": \"input_value\",\r\n                        \"name\": \"VALUE\",\r\n                        \"check\": \"String\"\r\n                    }\r\n                ],\r\n                \"output\": \"Number\",\r\n                \"colour\": 160,\r\n                \"tooltip\": \"Returns number of letters in the provided text.\",\r\n                \"helpUrl\": \"https://www.w3schools.com/jsref/jsref_length_string.asp\"\r\n            });\r\n            Python['string_length'] = function (block) {\r\n                console.log(block)\r\n                let argument0 = Python.valueToCode(block, 'VALUE', Python.ORDER_FUNCTION_CALL) || '\\'\\'';\r\n                return [\"len(\" + argument0 + ')', Python.ORDER_MEMBER];\r\n            };\r\n        }\r\n    };\r\n    Blockly.Blocks['env'] = {\r\n        init: function () {\r\n            this.setOutput(true,\"String\");\r\n            this.appendDummyInput().appendField(\"環境変数 $\").appendField(new Blockly.FieldTextInput(''), 'FIELDNAME');\r\n            Python['env'] = function (block) {\r\n                let argument0 = block.getFieldValue('FIELDNAME')\r\n                return \"os.environ.get('\" + argument0 + \"')\\n\"\r\n            };\r\n        }\r\n    };\r\n    Blockly.Blocks['argv'] = {\r\n        init: function () {\r\n            this.setOutput(true,[\"String\",\"Number\"]);\r\n            this.appendDummyInput().appendField(\"実行時変数\").appendField(new Blockly.FieldDropdown([\r\n                ['総数', 'len(sys.argv)'],\r\n                ['0番目', 'sys.argv[0]'],\r\n                ['1番目', 'sys.argv[1]'],\r\n                ['2番目', 'sys.argv[2]'],\r\n            ]), 'FIELDNAME');\r\n            Python['argv'] = function (block) {\r\n                return block.getFieldValue('FIELDNAME')\r\n            };\r\n        }\r\n    };\r\n    Blockly.Blocks['import'] = {\r\n        init: function () {\r\n            this.setNextStatement(true);\r\n            this.setPreviousStatement(true);\r\n            this.setOutput(false);\r\n            this.setColour(100);\r\n            this.setTooltip('import module, eg. import request.');\r\n            this.appendDummyInput()\r\n                .appendField(\"import\")\r\n                .appendField(new Blockly.FieldTextInput(''), 'FIELDNAME');\r\n            Python['import'] = function (block) {\r\n                let argument0 = block.getFieldValue('FIELDNAME')\r\n                return \"import \" + argument0 + \"\\n\"\r\n            };\r\n        }\r\n    };\r\n    Python.addReservedWords('code');\r\n}","import React from 'react';\r\nimport Blockly from 'blockly';\r\nimport Python from 'blockly/python';\r\nimport loadScript from './loadScript';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {code: ''};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleResize = this.handleResize.bind(this);\r\n    }\r\n\r\n    handleChange(primaryEvent) {\r\n        if (primaryEvent instanceof Blockly.Events.Ui) {\r\n            return;  // Don't mirror UI events.\r\n        }\r\n        this.setState({\r\n            code: Python.workspaceToCode(this.workSpace)\r\n        });\r\n        this.handleResize(null)\r\n    }\r\n\r\n    handleSubmit() {\r\n        console.log(\"hello\")\r\n    }\r\n\r\n    handleResize(e) {\r\n        // this.blocklyArea = document.getElementById('blocklyArea')\r\n        // Compute the absolute coordinates and dimensions of blocklyArea.\r\n        let element = this.blocklyArea;\r\n        let x = 0;\r\n        let y = 0;\r\n        do {\r\n            x += element.offsetLeft;\r\n            y += element.offsetTop;\r\n            element = element.offsetParent;\r\n        } while (element);\r\n        // Position blocklyDiv over blocklyArea.\r\n        this.blocklyDiv.style.left = x + 'px';\r\n        this.blocklyDiv.style.top = y + 'px';\r\n        this.blocklyDiv.style.width = this.blocklyArea.offsetWidth + 'px';\r\n        this.blocklyDiv.style.height = this.blocklyArea.offsetHeight + 'px';\r\n        Blockly.svgResize(this.workSpace);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.blocklyArea = document.getElementById('blocklyArea');\r\n        this.blocklyDiv = document.getElementById('blocklyDiv');\r\n        this.workSpace = Blockly.inject('blocklyDiv', {\r\n            toolbox: document.getElementById('toolbox')\r\n        });\r\n\r\n        // カスタムブロック\r\n        loadScript(Blockly, Python, this.workSpace)\r\n        // 変更即反映\r\n        this.workSpace.addChangeListener(this.handleChange)\r\n\r\n        window.addEventListener('resize', this.handleResize, false);\r\n        this.handleResize();\r\n        Blockly.svgResize(this.workSpace);\r\n    }\r\n\r\n    render() {\r\n        const lines = this.state.code.split(\"\\n\").map((line) =>\r\n            <p key={line}>{line}</p>\r\n        );\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>blockly demo</h1>\r\n                <table style={{width: \"100%\"}}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            {lines}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td id=\"blocklyArea\" style={{height: \"600px\"}}></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div id=\"blocklyDiv\" style={{position: \"absolute\"}}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}