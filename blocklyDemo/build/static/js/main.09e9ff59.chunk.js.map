{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","code","handleChange","bind","handleSubmit","handleResize","Blockly","Blocks","init","this","jsonInit","setNextStatement","setPreviousStatement","setOutput","setColour","setTooltip","appendDummyInput","appendField","FieldTextInput","Python","block","getFieldValue","console","log","valueToCode","ORDER_FUNCTION_CALL","ORDER_MEMBER","addReservedWords","setState","workspaceToCode","workSpace","e","element","blocklyArea","x","y","offsetLeft","offsetTop","offsetParent","blocklyDiv","style","left","top","width","offsetWidth","height","offsetHeight","svgResize","document","getElementById","inject","toolbox","window","addEventListener","lines","split","map","line","className","onClick","id","position","display","name","type","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09e9ff59.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Blockly from 'blockly';\nimport Python from 'blockly/python';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {code: ''};\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n\n        Blockly.Blocks['string_length'] = {\n            init: function () {\n                this.jsonInit({\n                    \"message0\": '%1 の長さ',\n                    \"args0\": [\n                        {\n                            \"type\": \"input_value\",\n                            \"name\": \"VALUE\",\n                            \"check\": \"String\"\n                        }\n                    ],\n                    \"output\": \"Number\",\n                    \"colour\": 160,\n                    \"tooltip\": \"Returns number of letters in the provided text.\",\n                    \"helpUrl\": \"https://www.w3schools.com/jsref/jsref_length_string.asp\"\n                });\n            }\n        };\n        Blockly.Blocks['import'] = {\n            init: function () {\n                this.setNextStatement(true);\n                this.setPreviousStatement(true);\n                this.setOutput(false);\n                this.setColour(100);\n                this.setTooltip('import module, eg. import request.');\n                this.appendDummyInput()\n                    .appendField(\"import\")\n                    .appendField(new Blockly.FieldTextInput(''), 'FIELDNAME');\n                Python['import'] = function (block) {\n                    let argument0 = block.getFieldValue('FIELDNAME')\n                    return \"import \" + argument0 + \"\\n\"\n                };\n            }\n        };\n        Python['string_length'] = function (block) {\n            console.log(block)\n            let argument0 = Python.valueToCode(block, 'VALUE', Python.ORDER_FUNCTION_CALL) || '\\'\\'';\n            return [\"len(\" + argument0 + ')', Python.ORDER_MEMBER];\n        };\n        Python.addReservedWords('code');\n    }\n\n    handleChange() {\n\n    }\n\n    handleSubmit() {\n        console.log(\"hello\")\n        this.setState({\n            code: Python.workspaceToCode(this.workSpace)\n        });\n        this.handleResize(null)\n    }\n\n    handleResize(e) {\n        // this.blocklyArea = document.getElementById('blocklyArea')\n        // Compute the absolute coordinates and dimensions of blocklyArea.\n        let element = this.blocklyArea;\n        let x = 0;\n        let y = 0;\n        do {\n            x += element.offsetLeft;\n            y += element.offsetTop;\n            element = element.offsetParent;\n        } while (element);\n        // Position blocklyDiv over blocklyArea.\n        this.blocklyDiv.style.left = x + 'px';\n        this.blocklyDiv.style.top = y + 'px';\n        this.blocklyDiv.style.width = this.blocklyArea.offsetWidth + 'px';\n        this.blocklyDiv.style.height = this.blocklyArea.offsetHeight + 'px';\n        Blockly.svgResize(this.workSpace);\n    }\n\n    componentDidMount() {\n        this.blocklyArea = document.getElementById('blocklyArea');\n        this.blocklyDiv = document.getElementById('blocklyDiv');\n        this.workSpace = Blockly.inject('blocklyDiv', {\n            toolbox: document.getElementById('toolbox')\n        });\n        window.addEventListener('resize', this.handleResize, false);\n        this.handleResize();\n        Blockly.svgResize(this.workSpace);\n    }\n\n    render() {\n        const lines = this.state.code.split(\"\\n\").map((line) =>\n            <p>{line}</p>\n        );\n        return (\n            <div className=\"App\">\n                <h1>blockly demo</h1>\n                <table style={{width: \"100%\"}}>\n                    <tbody>\n                    <tr>\n                        <td>\n                            <button onClick={this.handleSubmit}>Generate python</button>\n                            {lines}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td id=\"blocklyArea\" style={{height: \"600px\"}}></td>\n                    </tr>\n                    </tbody>\n                </table>\n                <div id=\"blocklyDiv\" style={{position: \"absolute\"}}></div>\n                <xml id=\"toolbox\" style={{display: \"none\"}}>\n                    <category name=\"既存部品\">\n                        <block type=\"controls_if\"></block>\n                        <block type=\"controls_repeat_ext\"></block>\n                        <block type=\"logic_compare\"></block>\n                        <block type=\"math_number\"></block>\n                        <block type=\"math_arithmetic\"></block>\n                        <block type=\"text\"></block>\n                        <block type=\"text_print\"></block>\n                    </category>\n                    <category name=\"カスタム部品\">\n                        <block type=\"string_length\"></block>\n                        <block type=\"import\"></block>\n                    </category>\n                </xml>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}