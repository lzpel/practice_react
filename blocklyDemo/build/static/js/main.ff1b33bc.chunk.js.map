{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["blocklyArea","blocklyDiv","workSpace","onresize","e","element","document","getElementById","x","y","offsetLeft","offsetTop","offsetParent","style","left","top","width","offsetWidth","height","offsetHeight","Blockly","svgResize","Blocks","init","this","jsonInit","App","React","useEffect","inject","toolbox","window","addEventListener","className","id","position","display","name","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gKAIIA,EAAaC,EAAYC,E,qEAqB7B,SAASC,EAASC,GAGd,IAAIC,EAFJL,EAAcM,SAASC,eAAe,eAGlCC,EAAI,EACJC,EAAI,EACR,GACID,GAAKH,EAAQK,WACbD,GAAKJ,EAAQM,UACbN,EAAUA,EAAQO,mBACbP,GAETJ,EAAWY,MAAMC,KAAON,EAAI,KAC5BP,EAAWY,MAAME,IAAMN,EAAI,KAC3BR,EAAWY,MAAMG,MAAQhB,EAAYiB,YAAc,KACnDhB,EAAWY,MAAMK,OAASlB,EAAYmB,aAAe,KACrDC,IAAQC,UAAUnB,GAnCtBkB,IAAQE,OAAR,cAAkC,CAC9BC,KAAM,WACFC,KAAKC,SAAS,CACV,SAAY,wBACZ,MAAS,CACL,CACI,KAAQ,cACR,KAAQ,QACR,MAAS,WAGjB,OAAU,SACV,OAAU,IACV,QAAW,kDACX,QAAW,8DAgERC,MAxCf,WAaI,OAZAC,IAAMC,WAAU,WACZ5B,EAAcM,SAASC,eAAe,eACtCN,EAAaK,SAASC,eAAe,cACrCL,EAAYkB,IAAQS,OAAO,aAAc,CACrCC,QAASxB,SAASC,eAAe,gBAGzCoB,IAAMC,WAAU,WACZG,OAAOC,iBAAiB,SAAU7B,GAAU,GAC5CA,IACAiB,IAAQC,UAAUnB,KACnB,IAEC,sBAAK+B,UAAU,MAAf,UACI,8CACA,uBAAOpB,MAAO,CAACG,MAAO,QAAtB,SACI,6BACI,oBAAIkB,GAAG,cAAcrB,MAAO,CAACK,OAAQ,eAG7C,qBAAKgB,GAAG,aAAarB,MAAO,CAACsB,SAAU,cACvC,sBAAKD,GAAG,UAAUrB,MAAO,CAACuB,QAAS,QAAnC,UACI,2BAAUC,KAAK,2BAAf,UACI,uBAAOC,KAAK,gBACZ,uBAAOA,KAAK,wBACZ,uBAAOA,KAAK,kBACZ,uBAAOA,KAAK,gBACZ,uBAAOA,KAAK,oBACZ,uBAAOA,KAAK,SACZ,uBAAOA,KAAK,kBAEhB,0BAAUD,KAAK,uCAAf,SACI,uBAAOC,KAAK,2BCjEjBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAASC,eAAe,SAM1BgC,M","file":"static/js/main.ff1b33bc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Blockly from 'blockly';\n\nlet blocklyArea, blocklyDiv, workSpace\n\nBlockly.Blocks['string_length'] = {\n    init: function () {\n        this.jsonInit({\n            \"message0\": '%1 の長さ',\n            \"args0\": [\n                {\n                    \"type\": \"input_value\",\n                    \"name\": \"VALUE\",\n                    \"check\": \"String\"\n                }\n            ],\n            \"output\": \"Number\",\n            \"colour\": 160,\n            \"tooltip\": \"Returns number of letters in the provided text.\",\n            \"helpUrl\": \"https://www.w3schools.com/jsref/jsref_length_string.asp\"\n        });\n    }\n};\n\nfunction onresize(e) {\n    blocklyArea = document.getElementById('blocklyArea')\n    // Compute the absolute coordinates and dimensions of blocklyArea.\n    let element = blocklyArea;\n    let x = 0;\n    let y = 0;\n    do {\n        x += element.offsetLeft;\n        y += element.offsetTop;\n        element = element.offsetParent;\n    } while (element);\n    // Position blocklyDiv over blocklyArea.\n    blocklyDiv.style.left = x + 'px';\n    blocklyDiv.style.top = y + 'px';\n    blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';\n    blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';\n    Blockly.svgResize(workSpace);\n}\n\nfunction App() {\n    React.useEffect(() => {\n        blocklyArea = document.getElementById('blocklyArea');\n        blocklyDiv = document.getElementById('blocklyDiv');\n        workSpace = Blockly.inject('blocklyDiv', {\n            toolbox: document.getElementById('toolbox')\n        });\n    });\n    React.useEffect(() => {\n        window.addEventListener('resize', onresize, false);\n        onresize();\n        Blockly.svgResize(workSpace);\n    }, []);\n    return (\n        <div className=\"App\">\n            <h1>blockly demo</h1>\n            <table style={{width: \"100%\"}}>\n                <tr>\n                    <td id=\"blocklyArea\" style={{height: \"600px\"}}></td>\n                </tr>\n            </table>\n            <div id=\"blocklyDiv\" style={{position: \"absolute\"}}></div>\n            <xml id=\"toolbox\" style={{display: \"none\"}}>\n                <category name=\"既存部品\">\n                    <block type=\"controls_if\"></block>\n                    <block type=\"controls_repeat_ext\"></block>\n                    <block type=\"logic_compare\"></block>\n                    <block type=\"math_number\"></block>\n                    <block type=\"math_arithmetic\"></block>\n                    <block type=\"text\"></block>\n                    <block type=\"text_print\"></block>\n                </category>\n                <category name=\"カスタム部品\">\n                    <block type=\"string_length\"></block>\n                </category>\n            </xml>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}