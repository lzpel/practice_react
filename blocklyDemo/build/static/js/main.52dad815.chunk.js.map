{"version":3,"sources":["App.js","loadScript.js","reportWebVitals.js","index.js"],"names":["App","props","state","code","handleChange","bind","handleSubmit","handleResize","primaryEvent","Blockly","Events","Ui","this","setState","Python","workspaceToCode","workSpace","console","log","e","element","blocklyArea","x","y","offsetLeft","offsetTop","offsetParent","blocklyDiv","style","left","top","width","offsetWidth","height","offsetHeight","svgResize","document","getElementById","inject","toolbox","defineBlocksWithJsonArray","block","getFieldValue","ORDER_ATOMIC","valueToCode","ORDER_NONE","addReservedWords","addChangeListener","window","addEventListener","lines","split","map","line","className","id","position","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.52dad815.chunk.js","sourcesContent":["import React from 'react';\r\nimport Blockly from 'blockly';\r\nimport Python from 'blockly/python';\r\nimport loadScript from './loadScript';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {code: ''};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleResize = this.handleResize.bind(this);\r\n    }\r\n\r\n    handleChange(primaryEvent) {\r\n        if (primaryEvent instanceof Blockly.Events.Ui) {\r\n            return;  // Don't mirror UI events.\r\n        }\r\n        this.setState({\r\n            code: Python.workspaceToCode(this.workSpace)\r\n        });\r\n        this.handleResize(null)\r\n    }\r\n\r\n    handleSubmit() {\r\n        console.log(\"hello\")\r\n    }\r\n\r\n    handleResize(e) {\r\n        // this.blocklyArea = document.getElementById('blocklyArea')\r\n        // Compute the absolute coordinates and dimensions of blocklyArea.\r\n        let element = this.blocklyArea;\r\n        let x = 0;\r\n        let y = 0;\r\n        do {\r\n            x += element.offsetLeft;\r\n            y += element.offsetTop;\r\n            element = element.offsetParent;\r\n        } while (element);\r\n        // Position blocklyDiv over blocklyArea.\r\n        this.blocklyDiv.style.left = x + 'px';\r\n        this.blocklyDiv.style.top = y + 'px';\r\n        this.blocklyDiv.style.width = this.blocklyArea.offsetWidth + 'px';\r\n        this.blocklyDiv.style.height = this.blocklyArea.offsetHeight + 'px';\r\n        Blockly.svgResize(this.workSpace);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.blocklyArea = document.getElementById('blocklyArea');\r\n        this.blocklyDiv = document.getElementById('blocklyDiv');\r\n        this.workSpace = Blockly.inject('blocklyDiv', {\r\n            toolbox: document.getElementById('toolbox')\r\n        });\r\n\r\n        // カスタムブロック\r\n        loadScript(Blockly, Python, this.workSpace)\r\n        // 変更即反映\r\n        this.workSpace.addChangeListener(this.handleChange)\r\n\r\n        window.addEventListener('resize', this.handleResize, false);\r\n        this.handleResize();\r\n        Blockly.svgResize(this.workSpace);\r\n    }\r\n\r\n    render() {\r\n        const lines = this.state.code.split(\"\\n\").map((line) =>\r\n            <p key={line}>{line}</p>\r\n        );\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>blockly demo</h1>\r\n                <table style={{width: \"100%\"}}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            {lines}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td id=\"blocklyArea\" style={{height: \"600px\"}}></td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div id=\"blocklyDiv\" style={{position: \"absolute\"}}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","\r\nconst text=`\r\nimport math,time\r\n\r\ndef str_cos(int_x,str_y):\r\n    return str(math.cos(int_x))+str_y\r\n    \r\ndef none_sleep(int_sec):\r\n    time.sleep\r\n\r\nprint(sin(1,\"aiueo\"))\r\n`\r\nfunction loadScript2(Blockly, Python, WorkSpace, Script) {\r\n    let funcRe = /^def\\s+([\\w\\s,()]+)/gm, funcParts;\r\n    while ((funcParts = funcRe.exec(Script)) !== null) {\r\n        let args=[], argsRe=/\\w+/g, argsArray\r\n        while ((argsArray = argsRe.exec(funcParts[1])) !== null) {\r\n            let arg=argsArray[0]\r\n            let parts=arg.split(\"_\")\r\n            if(parts.length<2){\r\n                console.log(\"無効な識別子\",arg,\"in\",funcParts[0])\r\n                return\r\n            }\r\n            args.push(parts)\r\n        }\r\n        Blockly.Blocks[args[0][1]] = {\r\n            args: args,\r\n            init: function () {\r\n                console.log(this.args);\r\n                this.setNextStatement(true);\r\n                this.setPreviousStatement(true);\r\n                this.setOutput(false);\r\n                this.setColour(100);\r\n                this.setTooltip('import module, eg. import request.');\r\n                this.appendDummyInput()\r\n                    .appendField(this.args[0][1])\r\n                    .appendField(new Blockly.FieldNumber(''), 'FIELDNAME');\r\n            }\r\n        }\r\n        Python[args[0][1]] = function (block) {\r\n            let argument0 = block.getFieldValue('FIELDNAME')\r\n            return args[0][1]+\"(\" + argument0 + \")\\n\"\r\n        }.bind(args);\r\n        console.log(WorkSpace)\r\n        //console.log(new Blockly.ToolboxItem({kind:Blockly.utils.toolbox.FLYOUT_TOOLBOX_KIND,type:args[0][1]}, WorkSpace.getToolbox(), null))\r\n    }\r\n}\r\nexport default function loadScript(Blockly, Python, WorkSpace){\r\n    //loadScript2(Blockly, Python, WorkSpace, text)\r\n    Blockly.defineBlocksWithJsonArray([\r\n        {\r\n            \"type\": \"env\",\r\n            \"message0\": \"\\\"環境変数 %1\\\"\",\r\n            \"output\": \"String\",\r\n            \"style\": \"text_blocks\",\r\n            \"args0\": [{\r\n                \"type\": \"field_input\",\r\n                \"name\": \"TEXT\",\r\n                \"text\": \"PATH\"\r\n            }],\r\n            \"extensions\": [\r\n                \"text_quotes\",\r\n                \"parent_tooltip_when_inline\"\r\n            ]\r\n        },\r\n        {\r\n            \"type\": \"argv\",\r\n            \"message0\": \"[実行時引数]\",\r\n            \"output\": \"Array\",\r\n            \"style\": \"list_blocks\",\r\n        },\r\n        {\r\n            \"type\": \"curl\",\r\n            \"message0\": \"curl %1\",\r\n            \"output\": \"String\",\r\n            \"style\": \"procedure_blocks\",\r\n            \"args0\": [\r\n                {\r\n                    \"type\": \"input_value\",\r\n                    \"name\": \"URL\",\r\n                    \"check\": [\"String\"]\r\n                }\r\n            ],\r\n        },\r\n    ])\r\n    Python['env'] = function (block) {\r\n        return [\"os.environ.get('\" + block.getFieldValue('TEXT') + \"')\", Blockly.Python.ORDER_ATOMIC]\r\n    };\r\n    Python['argv'] = function (block) {\r\n        return [\"sys.argv\", Blockly.Python.ORDER_ATOMIC]\r\n    };\r\n    Python['curl'] = function (block) {\r\n        let url=Blockly.Python.valueToCode(block, 'URL', Blockly.Python.ORDER_NONE) || '';\r\n        let code=\"urllib.request.urlopen(\"+url+\")\"\r\n        return [code, Blockly.Python.ORDER_ATOMIC]\r\n    };\r\n    Python.addReservedWords('code');\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}